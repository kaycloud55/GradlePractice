apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

/**
 * 扩展属性，这种方法相当于宏定义了一个变量，在其他地方都可以使用
 */
//
//ext {
//    compileSdkVer = 25
//}

android {
//    compileSdkVersion mCompileSdkVersion.toInteger()
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.kaycloud.gradlepractice"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //更改构建包的名字

//    applicationVariants.all { variants ->
//        variants.outputs
//    }

}

/**
 * 这里是为应用程序添加的依赖，也就是编写Android代码时候用的
 * buildScript里面是的dependencies是gradle用的
 */
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation('org.hibernate:hibernate:3.1') {
        //如果有版本冲突就强制使用这个版本
        force = true
        //排除特定的传递依赖
        exclude module: 'cglib' //by artifact name
        exclude group: 'org.jmock' //by group
        exclude group: 'org.unwanted', module: 'iAmBuggy' //by both name and group
        //禁止传递依赖
        transitive = false
    }

}

/**
 * copy是project已经定义的一个方法
 */
//copy {
//    from file('youdo.jks')
//    into rootProject.getBuildDir().path + '/apk/'
//    //exclude可以过滤一些不需要拷贝的文件
//    exclude {
//
//    }
//    //rename可以重命名
//    rename {
//    }
//}

//对文件树进行遍历
fileTree('../sdk') { FileTree fileTree ->
    fileTree.visit { FileTreeElement element ->
        if (element.isDirectory()) {
            println 'the file name is:' + element.name
        }
    }

}


